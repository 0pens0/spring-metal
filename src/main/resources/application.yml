spring:
  ai:
    openai:
      api-key: "YOUR KEY"
  jpa:
    generate-ddl: true

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    info:
      show-values: ALWAYS
      git:
        mode: full
      spring:
        boot:
          version: '@app.spring.boot.version@'
      app:
        version: @project.version@
    health:
      enabled: true
      show-details: always
    env:
      show-values: ALWAYS
  
---
spring:
  config:
    activate:
      on-profile: http2

server:
  http2:
    enabled: true
  port: 8443
  #ssl:
  #  enabled: true
  #  key-alias: demo
  #  key-store: classpath:keystore.bks
  #  key-store-password: changeit
  #  key-password: changeit
  #  key-store-type: "BCFKS"
    
---
logging:
  level:
    root: DEBUG
---
spring:
  config:
    activate:
      on-profile: mysql
  datasource:
    url: "jdbc:mysql://localhost/music"
    driver-class-name: com.mysql.jdbc.Driver
    username:
    password:
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL55Dialect

---
spring:
  config:
    activate:
      on-profile: postgres
  datasource:
    url: "jdbc:postgresql://localhost/music"
    driver-class-name: org.postgresql.Driver
    username: postgres
    password:
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
---
#tanzu:
#  governance:
#    fips:
#      exit-on-failure: true
---
tracing:
    sampling:
        probability: 0.5
wavefront:
    application:
        name: spring-metal
        service-name: tanzu-hub-app-management-spring-demo-apps
        custom-tags:
            instance_guid: ${CF_INSTANCE_GUID}
    api-token: cfd06c63-7ef3-4f3d-a48f-8bf662bf2453// this is a fake token since wavefront lib expects a token, though this is not used for authentication to collector for ingestion
    uri: http://telegraf.hub-collector.service.internal:8765
metrics:
    tags:
        instance_guid: ${CF_INSTANCE_GUID}
